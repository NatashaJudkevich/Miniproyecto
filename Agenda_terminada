import tkinter as tk  
from tkinter import ttk,messagebox
import sqlite3


#BASE DE DATOS

def crear_bd():
    conexion = sqlite3.connect('agenda.db')
    cursor = conexion.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS contactos (
            nombre VARCHAR NOT NULL PRIMARY KEY,
            telefono INT NOT NULL,
            email VARCHAR,
            direccion VARCHAR)''')
    conexion.commit()
    conexion.close()

#Ventanas de Inicio

class AgendaPersonal:  
    def __init__(self, root):  
        self.root = root  
        self.root.title("Agenda Personal")  
        self.root.geometry("1000x600")  
        self.root.config(bg="#87CEEB")  

        self.initial_frame = tk.Frame(self.root, bg="#87CEEB")  
        self.initial_frame.pack(fill=tk.BOTH, expand=True)  

        self.create_initial_widget()  

        self.contactos = []  

    def create_initial_widget(self):  
        label = tk.Label(self.initial_frame, text="¿Desea iniciar o salir del programa?",  
                         font=("Helvetica", 20, "bold"), bg="#87CEEB", fg="#333")  
        label.pack(pady=30)  

        button_frame = tk.Frame(self.initial_frame, bg="#87CEEB")  
        button_frame.pack(pady=20)  

        start_button = tk.Button(button_frame, text="Inicializar", command=self.open_main_window,  
                                 font=("Arial", 14), fg="#fff", bg="#0056b3", relief="raised")  
        start_button.pack(side=tk.LEFT, padx=20, pady=10)  

        exit_button = tk.Button(button_frame, text="Salir", command=self.root.quit,  
                                font=("Arial", 14), fg="#fff", bg="#0056b3", relief="raised")  
        exit_button.pack(side=tk.LEFT, padx=20, pady=10)  

    def open_main_window(self):  

        self.initial_frame.pack_forget() 
        

        #Creacion ventanas
    
        self.main_frame = tk.Frame(self.root, bg="#87CEEB", width=300, height=300)  
        #self.main_frame.pack(pady=20, padx=20)     Esto creoooo que no aporta nada
        self.main_frame.place(relx=0.25, rely=0.5, anchor='center') 

        self.main_botones = tk.Frame(self.root, bg="#87CEEB", width=300, height=300)  
        #self.main_frame.pack(pady=20, padx=20)   Esto creoooo que no aporta nada
        self.main_botones.place(relx=0.5, rely=0.2, anchor='center')  
 
        self.main_lista = ttk.Treeview(self.root, columns=("col1","col2","col3"))  

        self.main_lista.column("#0",width=2,anchor="center")
        self.main_lista.column("col1",width=5,anchor="center")
        self.main_lista.column("col2",width=5,anchor="center")
        self.main_lista.column("col3",width=5,anchor="center")
    

        self.main_lista.heading("#0",text="Nombre",anchor="center")
        self.main_lista.heading("col1",text="Telefono",anchor="center")
        self.main_lista.heading("col2",text="Email",anchor="center")
        self.main_lista.heading("col3",text="Direccion",anchor="center")
    

        self.main_lista.place(relx=0.5, rely=0.3, width=420, height=300)
        
        #Datos que se piden en menu


        label_nombre = tk.Label(self.main_frame, text="Nombre:", font=("Arial", 12), bg="#87CEEB", fg="#333")  
        label_nombre.pack(padx=8, pady=5)  

        self.entrada_nombre = tk.Entry(self.main_frame, width=30, font=("Arial", 12), bg="#f0f0f0", fg="#333")  
        self.entrada_nombre.pack(padx=8, pady=5)  

        label_telefono = tk.Label(self.main_frame, text="Teléfono:", font=("Arial", 12), bg="#87CEEB", fg="#333")  
        label_telefono.pack(padx=8, pady=5)  

        self.entrada_telefono = tk.Entry(self.main_frame, width=30, font=("Arial", 12), bg="#f0f0f0", fg="#333")  
        self.entrada_telefono.pack(padx=8, pady=5)

        label_direccion = tk.Label(self.main_frame, text="Dirección:", font=("Arial", 12), bg="#87CEEB", fg="#333")  
        label_direccion.pack(padx=8, pady=5)  

        self.entrada_direccion = tk.Entry(self.main_frame, width=30, font=("Arial", 12), bg="#f0f0f0", fg="#333")  
        self.entrada_direccion.pack(padx=8, pady=5)  

        label_email = tk.Label(self.main_frame, text="Email:", font=("Arial", 12), bg="#87CEEB", fg="#333")  
        label_email.pack(padx=8, pady=5)  

        self.entrada_email = tk.Entry(self.main_frame, width=30, font=("Arial", 12), bg="#f0f0f0", fg="#333")  
        self.entrada_email.pack(padx=8, pady=5)  


        #Botones en menu


        boton_agregar = tk.Button(self.main_botones, text="Agregar Contacto", command=self.agregar_contacto,  
                                   font=("Arial", 12), fg="#fff", bg="#0056b3", width=15, height=1, relief="raised")  
        boton_agregar.pack(side=tk.LEFT, padx=10)  

        boton_buscar = tk.Button(self.main_botones, text="Buscar Contacto", command=self.buscar_contacto,  
                                 font=("Arial", 12), fg="#fff", bg="#0056b3", width=15, height=1, relief="raised")  
        boton_buscar.pack(side=tk.LEFT, padx=10)  

        boton_editar = tk.Button(self.main_botones, text="Editar Contacto", command=self.editar_contacto,  
                                 font=("Arial", 12), fg="#fff", bg="#0056b3", width=15, height=1, relief="raised")  
        boton_editar.pack(side=tk.LEFT, padx=10)  

        boton_eliminar = tk.Button(self.main_botones, text="Eliminar Contacto", command=self.eliminar_contacto,  
                                   font=("Arial", 12), fg="#fff", bg="#0056b3", width=15, height=1, relief="raised")  
        boton_eliminar.pack(side=tk.LEFT, padx=10)  

        for button in [boton_agregar, boton_buscar, boton_editar, boton_eliminar]:  
            button.bind("<Enter>", lambda e: button.config(bg="#0056b3"))    
            button.bind("<Leave>", lambda e: button.config(bg="#28a745" if button == boton_agregar else "#17a2b8" if button == boton_buscar else "#007BFF" if button == boton_editar else "#0056b3"))  

        self.mostrar_todos_contactos()


   #Definicion de Metodos
   

    def agregar_contacto(self): 
        nombre = self.entrada_nombre.get()  
        telefono = self.entrada_telefono.get()
        email = self.entrada_email.get()
        direccion = self.entrada_direccion.get()

        if nombre and telefono:  
            email = email if email else ""
            direccion = direccion if direccion else ""

            conexion = sqlite3.connect('agenda.db')
            cursor = conexion.cursor()
            cursor.execute("INSERT INTO contactos (nombre, telefono, email, direccion) VALUES (?, ?, ?, ?)",
                           (nombre, telefono, email, direccion))
            conexion.commit()
            conexion.close()

            self.mostrar_todos_contactos()

            self.entrada_nombre.delete(0, tk.END)  
            self.entrada_telefono.delete(0, tk.END)  
            self.entrada_email.delete(0, tk.END)
            self.entrada_direccion.delete(0, tk.END)
            messagebox.showinfo("Éxito", "Contacto agregado correctamente.")  
        else:  
            messagebox.showwarning("Advertencia", "Por favor, completa todos los campos.")  


    def buscar_contacto(self):  
        nombre = self.entrada_nombre.get()  
     
        conexion = sqlite3.connect('agenda.db')
        cursor = conexion.cursor()
        cursor.execute("SELECT * FROM contactos WHERE nombre=?", (nombre,))
        contacto = cursor.fetchone()
        conexion.close()

        if contacto:
            self.entrada_nombre.delete(0, tk.END)  
            self.entrada_telefono.delete(0, tk.END)  
            self.entrada_email.delete(0, tk.END)
            self.entrada_direccion.delete(0, tk.END)
            
            mensaje = f"Nombre: {contacto[0]}\nTeléfono: {contacto[1]}\nEmail: {contacto[2]}\nDirección: {contacto[3]}"
            messagebox.showinfo("Contacto encontrado\n", mensaje)
        else:
            messagebox.showwarning("No encontrado", "Contacto no encontrado.")


    def editar_contacto(self):  
        nombre = self.entrada_nombre.get()  
        telefono = self.entrada_telefono.get()  
        email = self.entrada_email.get()
        direccion = self.entrada_direccion.get()

        conexion = sqlite3.connect('agenda.db')
        cursor = conexion.cursor()
        cursor.execute("UPDATE contactos SET telefono=?, email=?, direccion=? WHERE nombre=?",
                       (telefono, email, direccion, nombre))
        conexion.commit()
        conexion.close()

        self.mostrar_todos_contactos()
        messagebox.showinfo("Éxito", "Contacto editado correctamente.")

    def eliminar_contacto(self):  
        nombre = self.entrada_nombre.get()  
        
        conexion = sqlite3.connect('agenda.db')
        cursor = conexion.cursor()
        cursor.execute("DELETE FROM contactos WHERE nombre=?", (nombre,))
        conexion.commit()
        conexion.close()

        self.mostrar_todos_contactos()
        messagebox.showinfo("Éxito", "Contacto eliminado correctamente.")

    def mostrar_todos_contactos(self):
        conexion = sqlite3.connect('agenda.db')
        cursor = conexion.cursor()
        
        cursor.execute("SELECT * FROM contactos")
        contactos = cursor.fetchall()
        conexion.close()

        # Limpiar el contenido anterior de la lista
        for row in self.main_lista.get_children():
            self.main_lista.delete(row)

        # Insertar cada contacto en la lista
        for contacto in contactos:
            self.main_lista.insert("", "end", text=contacto[0], values=(contacto[1], contacto[2], contacto[3]))




#Menu 

if __name__ == "__main__":  
    crear_bd()
    root = tk.Tk()  
    app = AgendaPersonal(root)  
    root.mainloop()

